// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type newsCategoriesViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *newsCategoriesViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("people").
func (v *newsCategoriesViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *newsCategoriesViewType) Columns() []string {
	return []string{
		"categoryid",
		"newsid",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *newsCategoriesViewType) NewStruct() reform.Struct {
	return new(NewsCategories)
}

// NewsCategoriesView represents people view or table in SQL database.
var NewsCategoriesView = &newsCategoriesViewType{
	s: parse.StructInfo{
		Type:    "NewsCategories",
		SQLName: "people",
		Fields: []parse.FieldInfo{
			{Name: "CategoryId", Type: "int64", Column: "categoryid"},
			{Name: "NewsId", Type: "int", Column: "newsid"},
		},
		PKFieldIndex: -1,
	},
	z: new(NewsCategories).Values(),
}

// String returns a string representation of this struct or record.
func (s NewsCategories) String() string {
	res := make([]string, 2)
	res[0] = "CategoryId: " + reform.Inspect(s.CategoryId, true)
	res[1] = "NewsId: " + reform.Inspect(s.NewsId, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *NewsCategories) Values() []interface{} {
	return []interface{}{
		s.CategoryId,
		s.NewsId,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *NewsCategories) Pointers() []interface{} {
	return []interface{}{
		&s.CategoryId,
		&s.NewsId,
	}
}

// View returns View object for that struct.
func (s *NewsCategories) View() reform.View {
	return NewsCategoriesView
}

// check interfaces
var (
	_ reform.View   = NewsCategoriesView
	_ reform.Struct = (*NewsCategories)(nil)
	_ fmt.Stringer  = (*NewsCategories)(nil)
)

func init() {
	parse.AssertUpToDate(&NewsCategoriesView.s, new(NewsCategories))
}
